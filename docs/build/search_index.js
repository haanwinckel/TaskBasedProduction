var documenterSearchIndex = {"docs":
[{"location":"#TaskBasedProduction.jl","page":"Home","title":"TaskBasedProduction.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Package for task-based production model.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Unit input demand calculator\nGeneral unit input demand calculation\nGeneral production function evaluation\nSpecific production function evaluation\nMarginal productivity of labor calculation\nElasticity of substitution and complementarity calculation\nGeneral marginal productivity of labor calculation\nElasticity of substitution and complementarity calculation general case","category":"page"},{"location":"#Function-Documentation","page":"Home","title":"Function Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"unitInputDemand\nunitInputDemand_general\nprod_fun_general\nprod_fun\nmargProdLabor\nelasticity_sub_comp\nmargProdLabor_general\nelasticity_sub_comp_general","category":"page"},{"location":"#TaskBasedProduction.unitInputDemand","page":"Home","title":"TaskBasedProduction.unitInputDemand","text":"unitInputDemand(xT::AbstractArray{<:Real}, θ::Real, κ::Real, z::Real, αVec::AbstractArray{<:Real}, skipParamChecks::Bool = false) -> AbstractArray{<:Real}\n\nCalculates unit labor demands given blueprint scale θ, blueprint shape κ, productivity z, an array of comparative advantage values αVec with H elements (one for each worker type), and an array xT of H-1 thresholds in task space.\n\nArguments\n\nxT: An array of H-1 thresholds in task space.\nθ: Blueprint scale parameter.\nκ: Blueprint shape parameter.\nz: Productivity parameter.\nαVec: An array of comparative advantage values with H elements.\nskipParamChecks: A boolean indicating whether to skip parameter checks (default is false).\n\nReturns\n\nAn array representing the labor demand for each labor type.\n\n\n\n\n\n","category":"function"},{"location":"#TaskBasedProduction.unitInputDemand_general","page":"Home","title":"TaskBasedProduction.unitInputDemand_general","text":"unitInputDemand_general(xT::Vector{Float64}, z::Real, b_g::Function, e_h::Vector{Function}) -> Vector{Float64}\n\nCalculates unit labor demands given an array xT of H-1 thresholds in task space, a productivity value z,  a density function b_g for the task distribution, and an array e_h of H functions representing the cost of each labor type as a function of task complexity.\n\nThe function first verifies that b_g is a valid density function. Then it computes the labor demand for each labor type by numerically integrating the ratio b_g(x) / (z * e_h[h](x)) over the intervals defined by the thresholds in xT.\n\nArguments\n\nxT: A vector of H-1 thresholds in task space.\nz: Productivity value.\nb_g: A density function for the task distribution.\ne_h: A vector of H functions representing the cost of each labor type as a function of task complexity.\n\nReturns\n\nA vector representing the labor demand for each labor type.\n\n\n\n\n\n","category":"function"},{"location":"#TaskBasedProduction.prod_fun_general","page":"Home","title":"TaskBasedProduction.prod_fun_general","text":"prodfungeneral(l::AbstractArray{<:Real}, z::Real, bg:: Function, eh::Vector{Function})\n\nCalculates the quantity produced (q), and task thresholds (xT) given labor inputs (labor_input),  productivity z, and general blueprint density function and a vector of efficiency functions, one for each labor type.\n\nInputs:\n\nl: Array of labor inputs of different types.\nz: Productivity parameter.\nb_g: Blueprint density function\ne_h: Vector of efficiency functions, one for each type \n\nReturns:\n\nq: Quantity produced.\nxT: Array of task thresholds.\n\n\n\n\n\n","category":"function"},{"location":"#TaskBasedProduction.prod_fun","page":"Home","title":"TaskBasedProduction.prod_fun","text":"prod_fun(l::AbstractArray{<:Real}, θ::Real, κ::Real, z::Real, αVec::AbstractArray{<:Real})\n\nCalculates the quantity produced (q), and task thresholds (xT) given labor inputs (l), blueprint scale θ, blueprint shape κ, productivity z, and an array of  comparative advantage values αVec with H elements (one for each worker type).\n\nInputs:\n\nl: Array of labor inputs of different types.\nθ: Blueprint scale parameter.\nκ: Blueprint shape parameter.\nz: Productivity parameter.\nαVec: Array of comparative advantage values with H elements.\n\nReturns:\n\nq: Quantity produced.\nxT: Array of task thresholds.\n\n\n\n\n\n","category":"function"},{"location":"#TaskBasedProduction.margProdLabor","page":"Home","title":"TaskBasedProduction.margProdLabor","text":"margProdLabor(labor_input::AbstractArray{<:Real}, θ::Real, κ::Real, z::Real, αVec::AbstractArray{<:Real}) -> AbstractArray{<:Real}\n\nCalculates the marginal productivity of labor for each worker type given the input parameters.\n\nArguments\n\nlabor_input: An array of labor demand values.\nθ: Blueprint scale parameter.\nκ: Blueprint shape parameter.\nz: Productivity parameter.\nαVec: An array of comparative advantage values.\n\nReturns\n\nAn array representing the marginal productivity of labor for each worker type.\n\n\n\n\n\n","category":"function"},{"location":"#TaskBasedProduction.elasticity_sub_comp","page":"Home","title":"TaskBasedProduction.elasticity_sub_comp","text":"elasticity_sub_comp(labor_input::AbstractArray{<:Real}, θ::Real, κ::Real, z::Real, αVec::AbstractArray{<:Real}) -> (AbstractArray{<:Real}, AbstractArray{<:Real})\n\nCalculates the elasticity of substitution and complementarity for a given set of parameters.\n\nArguments\n\nlabor_input: An array of labor inputs of different types with H elements.\nθ: Blueprint scale parameter.\nκ: Blueprint shape parameter.\nz: Productivity parameter.\nαVec: An array of comparative advantage values with H elements.\n\nReturns\n\nϵ_h_sub: Matrix of elasticity of substitution values for each worker type h (rows) relative to worker type h_prime (columns).\nϵ_h_compl: Matrix of elasticity of complementarity values for each worker type h (rows) relative to worker type h_prime (columns).\n\n\n\n\n\n","category":"function"},{"location":"#TaskBasedProduction.margProdLabor_general","page":"Home","title":"TaskBasedProduction.margProdLabor_general","text":"margProdLabor_general(labor_input::AbstractArray{<:Real}, z::Real, b_g::Function, e_h::Vector{Function}) -> AbstractArray{<:Real}\n\nCalculates the marginal productivity of labor for each worker type given the input parameters.\n\nArguments\n\nlabor_input: An array of labor inputs of different types with H elements.\nz: A productivity scalar.\nb_g: A task density function.\ne_h: A vector of comparative advantage functions.\n\nReturns\n\nAn array representing the marginal productivity of labor for each worker type.\n\n\n\n\n\n","category":"function"},{"location":"#TaskBasedProduction.elasticity_sub_comp_general","page":"Home","title":"TaskBasedProduction.elasticity_sub_comp_general","text":"elasticity_sub_comp_general(labor_input::AbstractArray{<:Real}, z::Real, b_g::Function, e_h::Vector{Function}) -> (AbstractArray{<:Real}, AbstractArray{<:Real})\n\nCalculates the elasticity of substitution and complementarity for a given set of parameters.\n\nArguments\n\nlabor_input: An array of labor inputs of different types with H elements.\nz: Productivity parameter.\nb_g: General task density function.\ne_h: Vector of comparative advantage functions.\n\nReturns\n\nϵ_h_sub: Matrix of elasticity of substitution values for each worker type h (rows) relative to worker type h_prime (columns).\nϵ_h_compl: Matrix of elasticity of complementarity values for each worker type h (rows) relative to worker type h_prime (columns).\n\n\n\n\n\n","category":"function"}]
}
